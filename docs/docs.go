// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ruslan's Support",
            "url": "https://t.me/Ruslan20007",
            "email": "ruslanrbb8@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/login.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Register a new user (student) in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration Info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/registration.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/registration.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Get list of all categories",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_categories.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/image": {
            "get": {
                "description": "Get image by filename",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Get image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filename",
                        "name": "filename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lesson": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check is all data confirmed and if so create lesson with status \"verification\" (Unconfirmed)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Add Unconfirmed lesson (lesson request)",
                "parameters": [
                    {
                        "description": "LessonData",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/book_lesson.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}": {
            "get": {
                "description": "Return lesson data by lesson's id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Get lesson data by lesson's id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_lesson.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/approve": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set lesson status \"waiting\" if this user is a teacher to lesson and lesson hasn't been cancelled (was verification)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Approve lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/cancel": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set lesson status \"cancelled\" if this user related to lesson",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Cancel lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/finish": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set lesson status \"finished\" if this user is a teacher to lesson and lesson's stats has been \"ongoing\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Finished lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/join": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "generate meet token to join \"ongoing\" lesson (if user related to lesson)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Join the lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/join_lesson.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/short-data": {
            "get": {
                "description": "Return lesson short data by lesson's id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Get lesson really short data by lesson's id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_lesson_shortdata.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/lessons/{id}/start": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "generate meet token and set status to lesson \"ongoing\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "lessons"
                ],
                "summary": "Start lesson",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LessonID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/start_lesson.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/review": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create review if authorized user (student) had lesson with this teacher and this category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reviews"
                ],
                "summary": "Create review",
                "parameters": [
                    {
                        "description": "Review data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/add_review.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/student/lessons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return all lessons which have student",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "students"
                ],
                "summary": "Get lessons for students",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_student_lessons.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teacher": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all info about teacher (user info + teacher + his skills) by user id in token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get teacher data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_teacher.response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user id by jwt token, and he became teach (if he was not be registrate himself as teacher)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "User registrate also as teacher",
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teacher/lessons": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Return all lessons which have teacher",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get lessons for teachers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_teacher_lessons.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teacher/schedule": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get lessons times from teacher schedule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get times from schedule",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_times.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add time to teacher schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Add time to schedule",
                "parameters": [
                    {
                        "description": "datetime",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/add_time.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teacher/skill": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registrate new skill for teacher (if he not exists create and registrate skill)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Registrate new skill",
                "parameters": [
                    {
                        "description": "Skill data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/add_skill.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teachers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get full teachers data (their user data, teacher data and skills)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get full teachers data",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Filter my teachers",
                        "name": "is_mine",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter category",
                        "name": "category",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_teachers.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teachers/{id}": {
            "get": {
                "description": "Get all info about teacher (user info + teacher + his skills) by his TeacherID in route (/api/teachers/{id})",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get teacher data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_teacher.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teachers/{id}/reviews": {
            "get": {
                "description": "Get all reviews by teacher's ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get reviews by teacher's ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_reviews.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/teachers/{id}/schedule": {
            "get": {
                "description": "Get lessons times from teacher schedule (by teacher ID)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Get times from schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Teacher's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_times.response"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get info about user by jwt token (in Authorization enter: Bearer \u003cyour_jwt_token\u003e)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_user.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Edit base data about user (optional fields)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Edit user",
                "parameters": [
                    {
                        "description": "Update Info",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/edit_user.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        },
        "/users/{id}/profile": {
            "get": {
                "description": "Get info about user by user id in route (/api/users/{id}/profile)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/get_user.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputils.ErrorStruct"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "add_review.request": {
            "type": "object",
            "required": [
                "category_id",
                "comment",
                "rate",
                "teacher_id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "comment": {
                    "type": "string",
                    "example": "some comment"
                },
                "rate": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "add_skill.request": {
            "type": "object",
            "required": [
                "category_id"
            ],
            "properties": {
                "about": {
                    "type": "string",
                    "example": "I am Groot"
                },
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "video_card_link": {
                    "type": "string",
                    "example": "https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85"
                }
            }
        },
        "add_time.request": {
            "type": "object",
            "required": [
                "datetime"
            ],
            "properties": {
                "datetime": {
                    "type": "string",
                    "example": "2025-02-01T00:00:00Z"
                }
            }
        },
        "book_lesson.request": {
            "description": "book lesson body request",
            "type": "object",
            "required": [
                "category_id",
                "schedule_time_id",
                "teacher_id"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "schedule_time_id": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_id": {
                    "description": "@Description exactly teacherID, not his userID",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "edit_user.request": {
            "description": "User registration request",
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "base64 encoded image"
                },
                "birthdate": {
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "example": "strongpass123"
                },
                "surname": {
                    "type": "string",
                    "example": "Smith"
                }
            }
        },
        "get_categories.category": {
            "description": "data of category",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "min_age": {
                    "type": "integer",
                    "example": 12
                },
                "name": {
                    "type": "string",
                    "example": "Programing"
                }
            }
        },
        "get_categories.response": {
            "description": "get categories response",
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_categories.category"
                    }
                }
            }
        },
        "get_lesson.response": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Programming"
                },
                "datetime": {
                    "type": "string",
                    "example": "2025-02-01T09:00:00Z"
                },
                "lesson_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "verification"
                },
                "student_avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "student_email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "student_id": {
                    "type": "integer",
                    "example": 1
                },
                "student_name": {
                    "type": "string",
                    "example": "John"
                },
                "student_surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "teacher_email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_name": {
                    "type": "string",
                    "example": "John"
                },
                "teacher_surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_lesson_shortdata.response": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Programming"
                },
                "lesson_id": {
                    "type": "integer",
                    "example": 1
                },
                "student_id": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_reviews.response": {
            "type": "object",
            "properties": {
                "reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_reviews.review"
                    }
                }
            }
        },
        "get_reviews.review": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "comment": {
                    "type": "string",
                    "example": "This is a comment"
                },
                "rate": {
                    "type": "integer",
                    "example": 5
                },
                "review_id": {
                    "type": "integer",
                    "example": 1
                },
                "skill_id": {
                    "type": "integer",
                    "example": 1
                },
                "student_avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "student_email": {
                    "type": "string",
                    "example": "qwerty@example.com"
                },
                "student_id": {
                    "type": "integer",
                    "example": 1
                },
                "student_name": {
                    "type": "string",
                    "example": "John"
                },
                "student_surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_student_lessons.respLessons": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Programming"
                },
                "datetime": {
                    "type": "string",
                    "example": "2025-02-01T09:00:00Z"
                },
                "lesson_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "verification"
                },
                "teacher_avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "teacher_email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                },
                "teacher_name": {
                    "type": "string",
                    "example": "John"
                },
                "teacher_surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_student_lessons.response": {
            "type": "object",
            "properties": {
                "lessons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_student_lessons.respLessons"
                    }
                }
            }
        },
        "get_teacher.response": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "birthdate": {
                    "type": "string",
                    "example": "2002-09-09T10:10:10+09:00"
                },
                "common_rate": {
                    "type": "number",
                    "example": 0
                },
                "common_reviews_count": {
                    "type": "integer",
                    "example": 0
                },
                "count_of_students": {
                    "type": "integer",
                    "example": 0
                },
                "email": {
                    "type": "string",
                    "example": "qwerty@example.com"
                },
                "finished_lessons": {
                    "type": "integer",
                    "example": 0
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "registration_date": {
                    "type": "string",
                    "example": "2022-09-09T10:10:10+09:00"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_teacher.skill"
                    }
                },
                "surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_teacher.skill": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string",
                    "example": "about me..."
                },
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Category"
                },
                "rate": {
                    "type": "number",
                    "example": 5
                },
                "reviews_count": {
                    "type": "integer",
                    "example": 1
                },
                "skill_id": {
                    "type": "integer",
                    "example": 1
                },
                "video_card_link": {
                    "type": "string",
                    "example": "https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85"
                }
            }
        },
        "get_teacher_lessons.respLessons": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Programming"
                },
                "datetime": {
                    "type": "string",
                    "example": "2025-02-01T09:00:00Z"
                },
                "lesson_id": {
                    "type": "integer",
                    "example": 1
                },
                "status": {
                    "type": "string",
                    "example": "verification"
                },
                "student_avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "student_email": {
                    "type": "string",
                    "example": "test@test.com"
                },
                "student_id": {
                    "type": "integer",
                    "example": 1
                },
                "student_name": {
                    "type": "string",
                    "example": "John"
                },
                "student_surname": {
                    "type": "string",
                    "example": "Smith"
                }
            }
        },
        "get_teacher_lessons.response": {
            "type": "object",
            "properties": {
                "lessons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_teacher_lessons.respLessons"
                    }
                }
            }
        },
        "get_teachers.response": {
            "type": "object",
            "properties": {
                "teachers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_teachers.teacher"
                    }
                }
            }
        },
        "get_teachers.skill": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string",
                    "example": "about me..."
                },
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "category_name": {
                    "type": "string",
                    "example": "Category"
                },
                "rate": {
                    "type": "number",
                    "example": 5
                },
                "reviews_count": {
                    "type": "integer",
                    "example": 1
                },
                "skill_id": {
                    "type": "integer",
                    "example": 1
                },
                "video_card_link": {
                    "type": "string",
                    "example": "https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85"
                }
            }
        },
        "get_teachers.teacher": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "birthdate": {
                    "type": "string",
                    "example": "2002-09-09T10:10:10+09:00"
                },
                "common_rate": {
                    "type": "number",
                    "example": 0
                },
                "common_reviews_count": {
                    "type": "integer",
                    "example": 0
                },
                "count_of_students": {
                    "type": "integer",
                    "example": 0
                },
                "email": {
                    "type": "string",
                    "example": "qwerty@example.com"
                },
                "finished_lessons": {
                    "type": "integer",
                    "example": 0
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "registration_date": {
                    "type": "string",
                    "example": "2022-09-09T10:10:10+09:00"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_teachers.skill"
                    }
                },
                "surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "teacher_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_times.response": {
            "type": "object",
            "properties": {
                "datetimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/get_times.times"
                    }
                }
            }
        },
        "get_times.times": {
            "type": "object",
            "properties": {
                "datetime": {
                    "type": "string",
                    "example": "0001-01-01T00:00:00Z"
                },
                "is_available": {
                    "type": "boolean",
                    "example": true
                },
                "schedule_time_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "get_user.response": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "uuid.png"
                },
                "birthdate": {
                    "type": "string",
                    "example": "2002-09-09T10:10:10+09:00"
                },
                "count_of_teachers": {
                    "type": "integer",
                    "example": 0
                },
                "email": {
                    "type": "string",
                    "example": "qwerty@example.com"
                },
                "finished_lessons": {
                    "type": "integer",
                    "example": 0
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_teacher": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "registration_date": {
                    "type": "string",
                    "example": "2022-09-09T10:10:10+09:00"
                },
                "surname": {
                    "type": "string",
                    "example": "Smith"
                },
                "verification_lessons": {
                    "type": "integer",
                    "example": 0
                },
                "waiting_lessons": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "httputils.ErrorStruct": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "join_lesson.response": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "login.request": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "strongpass123"
                }
            }
        },
        "login.response": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "registration.request": {
            "description": "User registration request",
            "type": "object",
            "required": [
                "birthdate",
                "email",
                "name",
                "password",
                "surname"
            ],
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "base64 encoded image"
                },
                "birthdate": {
                    "type": "string",
                    "example": "2000-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "type": "string",
                    "example": "strongpass123"
                },
                "surname": {
                    "type": "string",
                    "example": "Smith"
                }
            }
        },
        "registration.response": {
            "description": "User registration response",
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "start_lesson.response": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:81",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Learn-Share API",
	Description:      "back-end part for mobile application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
