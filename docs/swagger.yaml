basePath: /api
definitions:
  category.getCategoriesResponse:
    description: get categories getCategoriesResponse.
    properties:
      categories:
        items:
          $ref: '#/definitions/category.respCategory'
        type: array
    type: object
  category.respCategory:
    description: data of respCategory.
    properties:
      id:
        example: 1
        type: integer
      min_age:
        example: 12
        type: integer
      name:
        example: Programing
        type: string
    type: object
  httputils.ErrorStruct:
    properties:
      error:
        type: string
    type: object
  lesson.bookLessonRequest:
    description: book lesson body bookLessonRequest.
    properties:
      category_id:
        example: 1
        type: integer
      schedule_time_id:
        example: 1
        type: integer
      teacher_id:
        description: '@Description exactly teacherID, not his userID'
        example: 1
        type: integer
    required:
    - category_id
    - schedule_time_id
    - teacher_id
    type: object
  lesson.connectLessonResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  lesson.getLessonResponse:
    description: data about lesson getLessonResponse.
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      datetime:
        example: "2025-02-01T09:00:00Z"
        type: string
      lesson_id:
        example: 1
        type: integer
      status:
        example: verification
        type: string
      student_avatar:
        example: uuid.png
        type: string
      student_email:
        example: test@test.com
        type: string
      student_id:
        example: 1
        type: integer
      student_name:
        example: John
        type: string
      student_surname:
        example: Smith
        type: string
      teacher_avatar:
        example: uuid.png
        type: string
      teacher_email:
        example: test@test.com
        type: string
      teacher_id:
        example: 1
        type: integer
      teacher_name:
        example: John
        type: string
      teacher_surname:
        example: Smith
        type: string
      teacher_user_id:
        example: 1
        type: integer
    type: object
  lesson.getLessonShortDataResponse:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      lesson_id:
        example: 1
        type: integer
      student_id:
        example: 1
        type: integer
      teacher_id:
        example: 1
        type: integer
      teacher_user_id:
        example: 1
        type: integer
    type: object
  lesson.getStudentLessonsResponse:
    properties:
      lessons:
        items:
          $ref: '#/definitions/lesson.respStudentLessons'
        type: array
    type: object
  lesson.getTeacherLessonsResponse:
    properties:
      lessons:
        items:
          $ref: '#/definitions/lesson.respTeacherLessons'
        type: array
    type: object
  lesson.respStudentLessons:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      datetime:
        example: "2025-02-01T09:00:00Z"
        type: string
      lesson_id:
        example: 1
        type: integer
      status:
        example: verification
        type: string
      teacher_avatar:
        example: uuid.png
        type: string
      teacher_email:
        example: test@test.com
        type: string
      teacher_id:
        example: 1
        type: integer
      teacher_name:
        example: John
        type: string
      teacher_surname:
        example: Smith
        type: string
      teacher_user_id:
        example: 1
        type: integer
    type: object
  lesson.respTeacherLessons:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      datetime:
        example: "2025-02-01T09:00:00Z"
        type: string
      lesson_id:
        example: 1
        type: integer
      status:
        example: verification
        type: string
      student_avatar:
        example: uuid.png
        type: string
      student_email:
        example: test@test.com
        type: string
      student_id:
        example: 1
        type: integer
      student_name:
        example: John
        type: string
      student_surname:
        example: Smith
        type: string
    type: object
  review.addReviewRequest:
    properties:
      category_id:
        example: 1
        type: integer
      comment:
        example: some comment
        type: string
      rate:
        example: 1
        type: integer
      teacher_id:
        example: 1
        type: integer
    required:
    - category_id
    - comment
    - rate
    - teacher_id
    type: object
  review.getReviewResponse:
    properties:
      reviews:
        items:
          $ref: '#/definitions/review.respReview'
        type: array
    type: object
  review.respReview:
    properties:
      category_id:
        example: 1
        type: integer
      comment:
        example: This is a comment
        type: string
      rate:
        example: 5
        type: integer
      review_id:
        example: 1
        type: integer
      skill_id:
        example: 1
        type: integer
      student_avatar:
        example: uuid.png
        type: string
      student_email:
        example: qwerty@example.com
        type: string
      student_id:
        example: 1
        type: integer
      student_name:
        example: John
        type: string
      student_surname:
        example: Smith
        type: string
      teacher_id:
        example: 1
        type: integer
    type: object
  schedule.addTimeRequest:
    properties:
      datetime:
        example: "2025-02-01T00:00:00Z"
        type: string
    required:
    - datetime
    type: object
  schedule.getTimesResponse:
    properties:
      datetimes:
        items:
          $ref: '#/definitions/schedule.respTimes'
        type: array
    type: object
  schedule.respTimes:
    properties:
      datetime:
        example: "0001-01-01T00:00:00Z"
        type: string
      is_available:
        example: true
        type: boolean
      schedule_time_id:
        example: 1
        type: integer
    type: object
  teacher.addSkillRequest:
    properties:
      about:
        example: I am Groot
        type: string
      category_id:
        example: 1
        type: integer
      video_card_link:
        example: https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85
        type: string
    required:
    - category_id
    type: object
  teacher.getTeacherResponse:
    properties:
      avatar:
        example: uuid.png
        type: string
      birthdate:
        example: "2002-09-09T10:10:10+09:00"
        type: string
      common_rate:
        example: 0
        type: number
      common_reviews_count:
        example: 0
        type: integer
      count_of_students:
        example: 0
        type: integer
      email:
        example: qwerty@example.com
        type: string
      finished_lessons:
        example: 0
        type: integer
      name:
        example: John
        type: string
      registration_date:
        example: "2022-09-09T10:10:10+09:00"
        type: string
      skills:
        items:
          $ref: '#/definitions/teacher.respSkill'
        type: array
      surname:
        example: Smith
        type: string
      teacher_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  teacher.getTeachersResponse:
    properties:
      teachers:
        items:
          $ref: '#/definitions/teacher.getTeacherResponse'
        type: array
    type: object
  teacher.respSkill:
    properties:
      about:
        example: about me...
        type: string
      category_id:
        example: 1
        type: integer
      category_name:
        example: Category
        type: string
      rate:
        example: 5
        type: number
      reviews_count:
        example: 1
        type: integer
      skill_id:
        example: 1
        type: integer
      video_card_link:
        example: https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85
        type: string
    type: object
  user.authResponse:
    description: User registration authResponse.
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  user.editUserRequest:
    description: User registration editUserRequest.
    properties:
      avatar:
        example: base64 encoded image
        type: string
      birthdate:
        example: "2000-01-01T00:00:00Z"
        type: string
      name:
        example: John
        type: string
      surname:
        example: Smith
        type: string
    type: object
  user.getUserResponse:
    properties:
      avatar:
        example: uuid.png
        type: string
      birthdate:
        example: "2002-09-09T10:10:10+09:00"
        type: string
      count_of_teachers:
        example: 0
        type: integer
      email:
        example: qwerty@example.com
        type: string
      finished_lessons:
        example: 0
        type: integer
      id:
        example: 1
        type: integer
      is_teacher:
        example: false
        type: boolean
      name:
        example: John
        type: string
      registration_date:
        example: "2022-09-09T10:10:10+09:00"
        type: string
      surname:
        example: Smith
        type: string
      verification_lessons:
        example: 0
        type: integer
      waiting_lessons:
        example: 0
        type: integer
    type: object
  user.loginRequest:
    properties:
      email:
        example: john@gmail.com
        type: string
      password:
        example: strongpass123
        type: string
    required:
    - email
    - password
    type: object
  user.registrationRequest:
    description: User registration registrationRequest.
    properties:
      avatar:
        example: base64 encoded image
        type: string
      birthdate:
        example: "2000-01-01T00:00:00Z"
        type: string
      email:
        example: john@gmail.com
        type: string
      name:
        example: John
        type: string
      password:
        example: strongpass123
        type: string
      surname:
        example: Smith
        type: string
    required:
    - birthdate
    - email
    - name
    - password
    - surname
    type: object
host: localhost:81
info:
  contact:
    email: ruslanrbb8@gmail.com
    name: Ruslan's Support
    url: https://t.me/Ruslan20007
  description: back-end part for mobile application.
  title: Learn-Share API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/user.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.authResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Login user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user (student) in the system
      parameters:
      - description: Registration Info
        in: body
        name: registrationRequest
        required: true
        schema:
          $ref: '#/definitions/user.registrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.authResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Register new user
      tags:
      - auth
  /categories:
    get:
      description: Get list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.getCategoriesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get categories
      tags:
      - categories
  /image:
    get:
      description: Get image by filename
      parameters:
      - description: filename
        in: query
        name: filename
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get image
      tags:
      - image
  /lesson:
    post:
      consumes:
      - application/json
      description: Check is all data confirmed and if so create lesson with status
        "verification" (Unconfirmed)
      parameters:
      - description: LessonData
        in: body
        name: bookLessonRequest
        required: true
        schema:
          $ref: '#/definitions/lesson.bookLessonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Add Unconfirmed lesson (lesson request)
      tags:
      - lessons
  /lessons/{id}:
    get:
      description: Return lesson data by lesson's id
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.getLessonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get lesson data by lesson's id
      tags:
      - lessons
  /lessons/{id}/approve:
    put:
      description: Set lesson status "waiting" if this user is a teacher to lesson
        and lesson hasn't been cancelled (was verification)
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Approve lesson
      tags:
      - lessons
  /lessons/{id}/cancel:
    put:
      description: Set lesson status "cancelled" if this user related to lesson
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Cancel lesson
      tags:
      - lessons
  /lessons/{id}/finish:
    put:
      description: Set lesson status "finished" if this user is a teacher to lesson
        and lesson's stats has been "ongoing"
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Finished lesson
      tags:
      - lessons
  /lessons/{id}/join:
    get:
      description: generate meet token to join "ongoing" lesson (if user related to
        lesson)
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.connectLessonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Join the lesson
      tags:
      - lessons
  /lessons/{id}/short-data:
    get:
      description: Return lesson short data by lesson's id
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.getLessonShortDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get lesson really short data by lesson's id
      tags:
      - lessons
  /lessons/{id}/start:
    put:
      description: generate meet token and set status to lesson "ongoing"
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.connectLessonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Start lesson
      tags:
      - lessons
  /review:
    post:
      consumes:
      - application/json
      description: Create review if authorized user (student) had lesson with this
        teacher and this category
      parameters:
      - description: Review data
        in: body
        name: addReviewRequest
        required: true
        schema:
          $ref: '#/definitions/review.addReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Create review
      tags:
      - reviews
  /student/lessons:
    get:
      description: Return all lessons which have student
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.getStudentLessonsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get lessons for students
      tags:
      - students
  /teacher:
    get:
      description: Get all info about teacher (user info + teacher + his skills) by
        user id in token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/teacher.getTeacherResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get teacher data
      tags:
      - teachers
    post:
      description: Get user id by jwt token, and he became teach (if he was not be
        registrate himself as teacher)
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: User registrate also as teacher
      tags:
      - teachers
  /teacher/lessons:
    get:
      description: Return all lessons which have teacher
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lesson.getTeacherLessonsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get lessons for teachers
      tags:
      - teachers
  /teacher/schedule:
    get:
      description: Get lessons times from teacher schedule
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schedule.getTimesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get times from schedule
      tags:
      - teachers
    post:
      consumes:
      - application/json
      description: Add time to teacher schedule
      parameters:
      - description: datetime
        in: body
        name: addTimeRequest
        required: true
        schema:
          $ref: '#/definitions/schedule.addTimeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Add time to schedule
      tags:
      - teachers
  /teacher/skill:
    post:
      consumes:
      - application/json
      description: Registrate new skill for teacher (if he not exists create and registrate
        skill)
      parameters:
      - description: Skill data
        in: body
        name: addSkillRequest
        required: true
        schema:
          $ref: '#/definitions/teacher.addSkillRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Registrate new skill
      tags:
      - teachers
  /teachers:
    get:
      description: Get full teachers data (their user data, teacher data and skills)
      parameters:
      - description: Filter my teachers
        in: query
        name: is_mine
        type: boolean
      - description: Filter category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/teacher.getTeachersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get full teachers data
      tags:
      - teachers
  /teachers/{id}:
    get:
      description: Get all info about teacher (user info + teacher + his skills) by
        his TeacherID in route (/api/teachers/{id})
      parameters:
      - description: Teacher's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/teacher.getTeacherResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get teacher data
      tags:
      - teachers
  /teachers/{id}/reviews:
    get:
      description: Get all reviews about teacher
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/review.getReviewResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get reviews
      tags:
      - teachers
  /teachers/{id}/schedule:
    get:
      description: Get lessons times from teacher schedule (by teacher ID)
      parameters:
      - description: Teacher's ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schedule.getTimesResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get times from schedule
      tags:
      - teachers
  /user/profile:
    get:
      description: 'Get info about user by jwt token (in Authorization enter: Bearer
        <your_jwt_token>)'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.getUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Edit base data about user (optional fields)
      parameters:
      - description: Update Info
        in: body
        name: editUserRequest
        required: true
        schema:
          $ref: '#/definitions/user.editUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Edit user
      tags:
      - users
  /users/{id}/profile:
    get:
      description: Get info about user by user id in route (/api/users/{id}/profile)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.getUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.ErrorStruct'
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
