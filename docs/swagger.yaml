basePath: /api
definitions:
  add_skill.request:
    properties:
      about:
        example: I am Groot
        type: string
      category_id:
        example: 1
        type: integer
      video_card_link:
        example: https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85
        type: string
    required:
    - category_id
    type: object
  add_time.request:
    properties:
      datetime:
        example: "2025-02-01T00:00:00Z"
        type: string
    required:
    - datetime
    type: object
  book_lesson.request:
    description: book lesson body request
    properties:
      category_id:
        example: 1
        type: integer
      schedule_time_id:
        example: 1
        type: integer
      teacher_id:
        description: '@Description exactly teacherID, not his userID'
        example: 1
        type: integer
    required:
    - category_id
    - schedule_time_id
    - teacher_id
    type: object
  get_categories.category:
    description: data of category
    properties:
      id:
        example: 1
        type: integer
      min_age:
        example: 12
        type: integer
      name:
        example: Programing
        type: string
    type: object
  get_categories.response:
    description: get categories response
    properties:
      categories:
        items:
          $ref: '#/definitions/get_categories.category'
        type: array
    type: object
  get_student_lessons.respLessons:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      datetime:
        example: "2025-02-01T09:00:00Z"
        type: string
      lesson_id:
        example: 1
        type: integer
      status:
        example: verification
        type: string
      teacher_avatar:
        example: uuid.png
        type: string
      teacher_id:
        example: 1
        type: integer
      teacher_name:
        example: John
        type: string
      teacher_surname:
        example: Smith
        type: string
      teacher_user_id:
        example: 1
        type: integer
    type: object
  get_student_lessons.response:
    properties:
      lessons:
        items:
          $ref: '#/definitions/get_student_lessons.respLessons'
        type: array
    type: object
  get_teacher.response:
    properties:
      avatar:
        example: uuid.png
        type: string
      birthdate:
        example: "2002-09-09T10:10:10+09:00"
        type: string
      email:
        example: qwerty@example.com
        type: string
      name:
        example: John
        type: string
      registration_date:
        example: "2022-09-09T10:10:10+09:00"
        type: string
      skills:
        items:
          $ref: '#/definitions/get_teacher.skill'
        type: array
      surname:
        example: Smith
        type: string
      teacher_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  get_teacher.skill:
    properties:
      about:
        example: about me...
        type: string
      category_id:
        example: 1
        type: integer
      category_name:
        example: Category
        type: string
      rate:
        example: 5
        type: integer
      skill_id:
        example: 1
        type: integer
      video_card_link:
        example: https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85
        type: string
    type: object
  get_teacher_lessons.respLessons:
    properties:
      category_id:
        example: 1
        type: integer
      category_name:
        example: Programming
        type: string
      datetime:
        example: "2025-02-01T09:00:00Z"
        type: string
      lesson_id:
        example: 1
        type: integer
      status:
        example: verification
        type: string
      student_avatar:
        example: uuid.png
        type: string
      student_id:
        example: 1
        type: integer
      student_name:
        example: John
        type: string
      student_surname:
        example: Smith
        type: string
    type: object
  get_teacher_lessons.response:
    properties:
      lessons:
        items:
          $ref: '#/definitions/get_teacher_lessons.respLessons'
        type: array
    type: object
  get_teachers.response:
    properties:
      teachers:
        items:
          $ref: '#/definitions/get_teachers.teacher'
        type: array
    type: object
  get_teachers.skill:
    properties:
      about:
        example: about me...
        type: string
      category_id:
        example: 1
        type: integer
      category_name:
        example: Category
        type: string
      rate:
        example: 5
        type: integer
      skill_id:
        example: 1
        type: integer
      video_card_link:
        example: https://youtu.be/HIcSWuKMwOw?si=FtxN1QJU9ZWnXy85
        type: string
    type: object
  get_teachers.teacher:
    properties:
      avatar:
        example: uuid.png
        type: string
      birthdate:
        example: "2002-09-09T10:10:10+09:00"
        type: string
      email:
        example: qwerty@example.com
        type: string
      name:
        example: John
        type: string
      registration_date:
        example: "2022-09-09T10:10:10+09:00"
        type: string
      skills:
        items:
          $ref: '#/definitions/get_teachers.skill'
        type: array
      surname:
        example: Smith
        type: string
      teacher_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    type: object
  get_times.response:
    properties:
      datetimes:
        items:
          $ref: '#/definitions/get_times.times'
        type: array
    type: object
  get_times.times:
    properties:
      datetime:
        example: "0001-01-01T00:00:00Z"
        type: string
      is_available:
        example: true
        type: boolean
      schedule_time_id:
        example: 1
        type: integer
    type: object
  get_user.response:
    properties:
      avatar:
        example: uuid.png
        type: string
      birthdate:
        example: "2002-09-09T10:10:10+09:00"
        type: string
      email:
        example: qwerty@example.com
        type: string
      id:
        example: 1
        type: integer
      is_teacher:
        example: false
        type: boolean
      name:
        example: John
        type: string
      registration_date:
        example: "2022-09-09T10:10:10+09:00"
        type: string
      surname:
        example: Smith
        type: string
    type: object
  join_lesson.response:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  jsonutils.ErrorStruct:
    properties:
      error:
        type: string
    type: object
  login.request:
    properties:
      email:
        example: john@gmail.com
        type: string
      password:
        example: strongpass123
        type: string
    required:
    - email
    - password
    type: object
  login.response:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  registration.request:
    description: User registration request
    properties:
      avatar:
        example: base64 encoded image
        type: string
      birthdate:
        example: "2000-01-01T00:00:00Z"
        type: string
      email:
        example: john@gmail.com
        type: string
      name:
        example: John
        type: string
      password:
        example: strongpass123
        type: string
      surname:
        example: Smith
        type: string
    required:
    - birthdate
    - email
    - name
    - password
    - surname
    type: object
  registration.response:
    description: User registration response
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  start_lesson.response:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
host: adoe.ru:81
info:
  contact:
    email: ruslanrbb8@gmail.com
    name: Ruslan's Support
    url: https://t.me/Ruslan20007
  description: back-end part for mobile application.
  title: Learn-Share API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/login.request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Login user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user (student) in the system
      parameters:
      - description: Registration Info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/registration.request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/registration.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Register new user
      tags:
      - auth
  /categories:
    get:
      description: Get list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_categories.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Get categories
      tags:
      - categories
  /image:
    get:
      description: Get image by filename
      parameters:
      - description: filename
        in: query
        name: filename
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Image file
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Get image
      tags:
      - image
  /lesson:
    post:
      consumes:
      - application/json
      description: Check is all data confirmed and if so create lesson with status
        "verification" (Unconfirmed)
      parameters:
      - description: LessonData
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/book_lesson.request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Add Unconfirmed lesson (lesson request)
      tags:
      - lessons
  /lessons:
    get:
      description: Return all lessons which have student
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_student_lessons.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get lessons for students
      tags:
      - lessons
  /lessons/{id}/approve:
    put:
      description: Set lesson status "waiting" if this user is a teacher to lesson
        and lesson hasn't been cancelled (was verification)
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Approve lesson
      tags:
      - lessons
  /lessons/{id}/cancel:
    put:
      description: Set lesson status "cancelled" if this user related to lesson
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Cancel lesson
      tags:
      - lessons
  /lessons/{id}/finish:
    put:
      description: Set lesson status "finished" if this user is a teacher to lesson
        and lesson's stats has been "ongoing"
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Finished lesson
      tags:
      - lessons
  /lessons/{id}/join:
    get:
      description: generate meet token to join "ongoing" lesson (if user related to
        lesson)
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/join_lesson.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Join the lesson
      tags:
      - lessons
  /lessons/{id}/start:
    put:
      description: generate meet token and set status to lesson "ongoing"
      parameters:
      - description: LessonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/start_lesson.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Start lesson
      tags:
      - lessons
  /teacher:
    get:
      description: Get all info about teacher (user info + teacher + his skills) by
        user id in token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_teacher.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get teacher data
      tags:
      - teachers
    post:
      description: Get user id by jwt token, and he became teach (if he was not be
        registrate himself as teacher)
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: User registrate also as teacher
      tags:
      - teachers
  /teacher/lessons:
    get:
      description: Return all lessons which have teacher
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_teacher_lessons.response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get lessons for teachers
      tags:
      - teachers
  /teacher/schedule:
    get:
      description: Get lessons times from teacher schedule
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_times.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get times from schedule
      tags:
      - teachers
    post:
      consumes:
      - application/json
      description: Add time to teacher schedule
      parameters:
      - description: datetime
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/add_time.request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Add time to schedule
      tags:
      - teachers
  /teacher/skill:
    post:
      consumes:
      - application/json
      description: Registrate new skill for teacher (if he not exists create and registrate
        skill)
      parameters:
      - description: Skill data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/add_skill.request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Registrate new skill
      tags:
      - teachers
  /teachers:
    get:
      description: Get full teachers data (their user data, teacher data and skills)
      parameters:
      - description: Filter my teachers
        in: query
        name: is_mine
        type: boolean
      - description: Filter category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_teachers.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get full teachers data
      tags:
      - teachers
  /teachers/{id}:
    get:
      description: Get all info about teacher (user info + teacher + his skills) by
        his UserID in route (/api/teachers/{id})
      parameters:
      - description: Teacher's UserID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_teacher.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Get teacher data
      tags:
      - teachers
  /teachers/{id}/schedule:
    get:
      description: Get lessons times from teacher schedule (by his UserID)
      parameters:
      - description: Teacher's UserID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_times.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Get times from schedule
      tags:
      - teachers
  /user/profile:
    get:
      description: 'Get info about user by jwt token (in Authorization enter: Bearer
        <your_jwt_token>)'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_user.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /users/{id}/profile:
    get:
      description: Get info about user by user id in route (/api/users/{id}/profile)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/get_user.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/jsonutils.ErrorStruct'
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
